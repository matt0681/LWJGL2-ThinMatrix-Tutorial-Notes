#version 400 core

// These lines below are the Fragment Shader's inputs.
// A texture coords vector, a surface normal vector, a toLight vector, and a toCamera vector.
in vec2 pass_textureCoordinates;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;

// This line represents the output of the Fragment Shader.
// It outputs a 4D vector that is the colour of a specific pixel.
out vec4 out_Color;

// These are uniform variables. They allow us to alter models
// without changing the VAO. In this case these lines allow us to
// use a texture and lighting on our models.
uniform sampler2D modelTexture;
uniform vec3 lightColour;
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;


void main(void) {

    // These two lines normalize our two vectors.
    // (Making the length one but keeping the original direction)
    vec3 unitNormal = normalize(surfaceNormal);
    vec3 unitLightVector = normalize(toLightVector);

    // These few lines calculate our dot product and ensures its between 0.2 and 1.
    // Also the vector diffuse is created, which is our final light product.
    float nDotl = dot(unitNormal, unitLightVector);
    // 0.2 to 1 ensures theres at least 0.2 units of light at all types, hence ambient light.
    float brightness = max(nDotl, 0.2);
    vec3 diffuse = brightness * lightColour;

    // These lines normalize our toCamera vector and create a from light vector;
    vec3 unitVectorToCamera = normalize(toCameraVector);
    vec3 lightDirectionVector = -unitLightVector;
    // This line calculates the reflected Light vector
    vec3 reflectedLightDirection = reflect(lightDirectionVector, unitNormal);

    // This line calculates the dot product between the reflected light and the camera.
    float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
    // This ensures it is greater than 0.0
    specularFactor = max(specularFactor, 0.0);
    // This line calculates the damping factor by raising the specular factor to the shine damping value.
    float dampedFactor = pow(specularFactor, shineDamper);
    // This calculated the final calculated light value.
    vec3 finalSpecular = dampedFactor * reflectivity * lightColour;

    // This line bases the pixel's color on the texture's colour and the light value.
    // It also takes into account visibility.
    out_Color = vec4(diffuse, 1.0) * texture(modelTexture, pass_textureCoordinates) + vec4(finalSpecular, 1.0);
    out_Color = mix(vec4(skyColour, 1.0), out_Color, visibility);
}