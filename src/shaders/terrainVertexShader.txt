#version 400 core

// These lines below are the Vertex Shader's inputs.
// Each input represents the data at a single vertex.
// A 3D vector for the position, a 2D vector for the texture's coords,
// and a 3D vector for the vertex' normal vector.
in vec3 position;
in vec2 textureCoordinates;
in vec3 normal;

// These lines below are the Vertex Shader's outputs.
// A  2D vector for the texture's coords, a 3D vector for the surface normal,
// and a 3D vector for the toLight vector.
out vec2 pass_textureCoordinates;
out vec3 surfaceNormal;
out vec3 toLightVector;
out vec3 toCameraVector;
out float visibility;

// These variables are uniform variables.
// They are all a 4x4 matrix and they provide ways to change our models
// without having to change our VAO
uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition;

// These two variables change the thickness of the fog (density), and
// how quickly visibility decreases with distance.
const float density = 0.0035; // 0.0035
const float gradient = 5.0;   // 5.0


void main(void) {

    // The 3D vector must be changed into a 4D vector, hence the vec4() function.
    // This creates a variable representing the transformed vertex.
    vec4 worldPosition = transformationMatrix * vec4(position, 1.0);

    // This tells OpenGL where and how to render the vertex input
    vec4 positionRelativeToCam = viewMatrix * worldPosition;
    gl_Position = projectionMatrix * viewMatrix * worldPosition;

    // These lines below set the values of our output variables.
    pass_textureCoordinates = textureCoordinates;

    // This line ensure that the surface normal is transformed just like the vertex.
    surfaceNormal = (transformationMatrix * vec4(normal, 0.0)).xyz;

    // This line creates a vector going from our vertex to our light. The "to Light" vector.
    toLightVector = lightPosition - worldPosition.xyz;

    // This line calculates the to Camera vector by getting the position of the camera and subtracting
    // the position of the vertex. (view matrix is essentially an inverse camera position)
    toCameraVector = (inverse(viewMatrix) * vec4(0.0, 0.0, 0.0, 1.0)).xyz - worldPosition.xyz;

    // This code takes the various variables needed for visibility calculation and
    // then calculates the visibility. See notes for equation.
    float distance = length(positionRelativeToCam.xyz);
    visibility = exp(-pow((distance * density), gradient));
    visibility = clamp(visibility, 0.0, 1.0);
}

